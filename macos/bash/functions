#!/usr/bin/env bash

export _FN_NAME=

# nvm functions
cdnvm() {
    command cd "$@";
    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default >/dev/null;
        fi

    elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        declare locally_resolved_nvm_version
        # `nvm ls` will check all locally-available versions
        # If there are multiple matching versions, take the latest one
        # Remove the `->` and `*` characters and spaces
        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

        # If it is not already installed, install it
        # `nvm install` will implicitly use the newly-installed version
        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
            nvm install "$nvm_version";
        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
            nvm use "$nvm_version" >/dev/null;
        fi
    fi
}

# tmux attach
function tat {

# When starting work on a project: open the terminal, cd into the folder, then `tat`.
#
# This function:
#
# - gets the name of the current directory and removes periods, which tmux doesn't like.
# - if any session with the same name is open, it re-attaches to it.
# - otherwise, it checks if an .envrc file is present and starts a new tmux session using direnv exec.
# - otherwise, starts a new tmux session with that name.

  name=$(basename `pwd` | sed -e 's/\.//g')

  if tmux ls 2>&1 | grep "$name"; then
    tmux attach -t "$name"
  elif [ -f .envrc ]; then
    direnv exec / tmux new-session -s "$name"
  else
    tmux new-session -s "$name"
  fi
}

expand-alias() {
    if [ -z "$1" ]; then
        echo "Missing alias name!"
        return
    fi
    alias "$@" | cut -d\' -f2
}

va() {
    if [ $# -eq 0 ]; then
        source "$VENV_NAME/bin/activate"
    else
        source "$1/bin/activate"
    fi
}

makevenv(){
    if [ "$1" ]; then
        local venv_dst="$1"
    else
        local venv_dst="$VENV_NAME"
    fi
    python -m venv $venv_dst;
    source "./$venv_dst/bin/activate";
}

parentdirname() {
    echo "$(basename "$(dirname "$PWD")")"
}

gcert() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcert "$@"
}

glogin() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command glogin "$@"
}

gcertstatus() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcertstatus "$@"
}

aliases() {
    if [ "$1" ]; then
        echo "$(cat $TT_DOTFILES_DIR/bash/aliases |
                awk '/alias/ { st = index($0," ");print substr($0,st+1) }' |
                awk -F'=' '{ print $1" : "$2 }' |
                grep $1 )"
    else
        echo "$(cat $TT_DOTFILES_DIR/bash/aliases |
                awk '/alias/ { st = index($0," ");print substr($0,st+1) }' |
                awk -F'=' '{ print $1" : "$2 }' )"
        
    fi
}

grep-history() {
    history | grep "$@"
}