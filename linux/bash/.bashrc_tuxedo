# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# ::begin:env
export TT_OS="tuxedo"
export TT_DOTFILES_DIR="$HOME/.dotfiles"
export TT_DOTFILES_OS_DIR="$HOME/.dotfiles/linux"
export TT_SCRIPTS_DIR="$TT_DOTFILES_OS_DIR/bin"
export TT_EDITOR=code
export TT_VENV_DIR=".venv"
export TT_PROJECTS_DIR="$HOME/projects"
export XDG_CONFIG_HOME="$HOME/.config"
# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# ::end:env

# ::begin:source-files
## source alacritty completions
if [ -d "$XDG_CONFIG_HOME/alacritty/completions" ]; then
  [ -f "$XDG_CONFIG_HOME/alacritty/completions/alacritty.bash" ] && \
    source "$XDG_CONFIG_HOME/alacritty/completions/alacritty.bash";
fi
# ::end:source-files

# ::begin:aliases
# some useful ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lh="ls -lAhF"

alias ls.="ls -d .*"
alias la.="ls -lAh | awk '\$NF ~ /^\./'"
# ::end:aliases

# ::begin:source-files
for file in $TT_DOTFILES_OS_DIR/bash/{functions,aliases}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# ::end:source-files


# ::begin:colors
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color|alacritty) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

## enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# ::end:colors

# ::begin:prompt
GREEN="\[\e[1;32m\]"
BLUE="\[\e[1;34m\]"
YELLOW="\[\e[1;33m\]"
DARK_GRAY="\[\e[0;90m\]"
RESET="\[\e[0m\]"
if [ "$color_prompt" = yes ]; then
    PS1="${debian_chroot:+($debian_chroot)}${GREEN}\u${RESET} ${BLUE}\W${RESET}"
else
    PS1="${debian_chroot:+($debian_chroot)}\u \W"
fi
PS1+="${DARK_GRAY}\$(git-branch)${RESET} > " # current branch
export PS1;

unset color_prompt force_color_prompt
# ::end:prompt

# ::begin:pyenv
if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init --path)"
fi
# ::end:pyenv

# ::begin:fish-shell

alias chfish="export TT_SHELL=fish; exec bash"

if [[ -z ${TT_SHELL+x} ]]; then
  export TT_SHELL="bash"
fi

if [[ $TT_SHELL == "fish" ]]; then
  if command -v fish &> /dev/null
  then
      exec fish
  fi
fi
# ::end:fish-shell
