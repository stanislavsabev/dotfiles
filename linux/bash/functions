#!/usr/bin/env bash

ps0() {
  unset PROMPT_COMMAND
  PS1='$ '
}

ps1() {
    source $TT_DOTFILES_DIR/bash_prompt
}

# Get named var (usage: get "VAR_NAME")
get() {
  echo "${!1}"
}

# git functions
git_branch() {
  git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

git-init() {
  git init
  git config --local user.name "stanislavsabev"
  git config --local user.email "bezraboten.34@gmail.com"
}


cob () {
  git checkout $(git branch | grep -i "$1")
}

findb() {
  git branch | grep -i "$1"
}

ls-dotfiles() {
  find . -maxdepth 1 -name ".*" -type l,f
}

ls-dotdirs() {
  find . -maxdepth 1 -name ".*" -type d
}

# tmux attach
tat() {

  # When starting work on a project: open the terminal, cd into the folder, then `tat`.
  #
  # This function:
  #
  # - gets the name of the current directory and removes periods, which tmux doesn't like.
  # - if any session with the same name is open, it re-attaches to it.
  # - otherwise, it checks if an .envrc file is present and starts a new tmux session using direnv exec.
  # - otherwise, starts a new tmux session with that name.
  
    name=$(basename `pwd` | sed -e 's/\.//g')

    if tmux ls 2>&1 | grep "$name"; then
      tmux attach -t "$name"
    elif [ -f .envrc ]; then
      direnv exec / tmux new-session -s "$name"
    else
      tmux new-session -s "$name"
    fi
}


patchset() {
    grep 'patchset' .branch_info | cut -d\= -f2
}


va() {

    local VA_NAME=
    if [ $# -eq 0 ]; then
      VA_NAME="$TT_VENV_DIR"
    else
      VA_NAME="$1"
    fi
    source "$VA_NAME/bin/activate"
}


gwt() {
    git worktree "$@"
}

gwt-add-ex() {
    gwt-add $@
    cd $1
    vscode-add-sett
}

gwt-list() {
    git worktree list "$@"
}

gwt-move() {
    git worktree move "$1" "$2"
    cd "$2"
    git branch -M "$2"
    cd - 
}

gwt-add() {
    if [ $# -eq 0 ]
      then
        echo "git worktree add -b <branch> <path> <commit-ish>"
        return
    fi

    # -b <branch-name> <path-name> <commit-ish>
    git worktree add -b "$1" "$1" "$2"
}

gwt-remove() {
    if [ $# -eq 0 ]; then
        echo "git worktree remove <worktree(==branch-name)> [--force]"
        return
    fi

    local WHERE="$1"
    if [[ $WHERE == */ ]]; then
        WHERE=${WHERE::-1}
    fi
    echo $WHERE
    shift
    
    if [[ "$1" == "--force" ]]; then
        git worktree remove --force $WHERE && git branch -D $WHERE
    else
        git worktree remove $WHERE && git branch -D $WHERE
    fi
}

gcert() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcert "$@"
}

glogin() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command glogin "$@"
}

gcertstatus() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcertstatus "$@"
}
