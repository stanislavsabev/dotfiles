{
    // Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "include_local_h": {
        "prefix": "include_local_h",
        "body": [
            "#include \"$0\""
        ],
        "description": "Include local header \"name.h\""
    },
    "include_system_h": {
        "prefix": "include_system_h",
        "body": [
            "#include <$0>"
        ],
        "description": "Include system header <name>"
    },
    "Add include guard": {
        "prefix": "header_guard",
        "description": "Adds an ifndef include guard to a C/C++ header",
        "body": [
            "#ifndef __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
            "#define __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
            "",
            "$0",
            "",
            "#endif // __${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}__",
            "",
        ]
    },
    "Auto include header file": {
        "prefix": "include_h",
        "description": "Auto include C/C++ header file",
        "body": [
            "#include \"${TM_FILENAME/(\\.cpp|\\.c)/.h/}\"",
            "$0",
        ]
    },
    "typedef struct": {
        "prefix": "typedef_struct",
        "description": "typedef struct",
        "body": [
            "typedef struct ${1:TypeName} {",
            "\t$0",
            "} $1;",
        ],
    }
}