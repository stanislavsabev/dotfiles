#!/usr/bin/env bash

# GIT FUNCTIONS
git-branch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

cob() {
    git checkout $(git branch | grep -i "$1")
}

findb() {
    git branch | grep -i "$1"
}

findwb() {
    git wb | grep -i "$1"
}

# nvm functions
cdnvm() {
    command cd "$@";
    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default >/dev/null;
        fi

    elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        declare locally_resolved_nvm_version
        # `nvm ls` will check all locally-available versions
        # If there are multiple matching versions, take the latest one
        # Remove the `->` and `*` characters and spaces
        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

        # If it is not already installed, install it
        # `nvm install` will implicitly use the newly-installed version
        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
            nvm install "$nvm_version";
        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
            nvm use "$nvm_version" >/dev/null;
        fi
    fi
}

# tmux attach
function tat {

# When starting work on a project: open the terminal, cd into the folder, then `tat`.
#
# This function:
#
# - gets the name of the current directory and removes periods, which tmux doesn't like.
# - if any session with the same name is open, it re-attaches to it.
# - otherwise, it checks if an .envrc file is present and starts a new tmux session using direnv exec.
# - otherwise, starts a new tmux session with that name.

  name=$(basename `pwd` | sed -e 's/\.//g')

  if tmux ls 2>&1 | grep "$name"; then
    tmux attach -t "$name"
  elif [ -f .envrc ]; then
    direnv exec / tmux new-session -s "$name"
  else
    tmux new-session -s "$name"
  fi
}

start-mig() {
    local WHERE="$(git branch --show-current)"
    local TARGET_DIR="."
    if [ "$1" ]; then
        WHERE="$1"
    fi
    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$MIGRATIONS_DIR/$WHERE"
    fi
    echo "Starting 'ggrc_migrations' at '$WHERE'..."
    cd $TARGET_DIR
    source "$MIGRATIONS_DIR/$VENV_MIG_NAME/bin/activate"
    set -o allexport && source ./configs/envs/local.env && set +o allexport
    flask run --port=8088
}

start-mig-db-init() {
    local WHERE="$(git branch --show-current)"
    local TARGET_DIR="."
    if [ "$1" ]; then
        WHERE="$1"
    fi
    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$MIGRATIONS_DIR/$WHERE"
    fi
    echo "Starting 'ggrc_migrations -> db_init' at '$WHERE'..."
    cd $TARGET_DIR
    source "$MIGRATIONS_DIR/$VENV_MIG_NAME/bin/activate"
    ./scripts/db_init.sh
}

start-be() {
    local WHERE=""
    local TARGET_DIR="."
    if [ "$1" ]; then
        WHERE="$1"
    else
        WHERE=$(git branch --show-current)
    fi
    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$BE_DIR/$WHERE"
    fi
    echo "Starting 'be' at '$WHERE'..."
    cd $TARGET_DIR
    source "$BE_DIR/$VENV_NAME/bin/activate"
    set -o allexport && source ./configs/envs/local.env && set +o allexport
    flask run --port=8082 --without-threads
}

start-fe-for-ui-tests() {
    local WHERE=""
    local TARGET_DIR="."
    if [ "$1" ]; then
        WHERE="$1"
    else
        WHERE=$(git branch --show-current)
    fi
    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$FE_DIR/$WHERE"
    fi
    echo "Starting 'fe-ui-tests' at '$WHERE'..."
    cdnvm $TARGET_DIR
    npm run build:production -- --config=e2e && npm run serve -- --port=8081
}

start-fe() {
    local WHERE=""
    local TARGET_DIR="."
    if [ "$1" ]; then
        WHERE="$1"
    else
        WHERE=$(git branch --show-current)
    fi
    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$FE_DIR/$WHERE"
    fi
    echo "Starting 'fe' at '$WHERE'..."
    cdnvm $TARGET_DIR
    npm run dev
}

start-soa() {
    start-soa-usage() { echo "Usage: start-soa [-b <branch/worktree> -c <config-file>]" 1>&2;}
    local OPTIND # (see https://stackoverflow.com/questions/16654607/using-getopts-inside-a-bash-function)

    local WHERE=$(git branch --show-current)
    local TARGET_DIR="."
    local CONFIG_FILE="./configs/envs/local.env"

    while getopts "b:c:" o; do
        case "${o}" in
            b)
                WHERE="${OPTARG}"
                ;;
            c)
                CONFIG_FILE="${OPTARG}"
                ;;
            *)
                start-soa-usage
                return;
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$SOA_DIR/$WHERE"
    fi

    echo "Starting 'soa'"
    echo "WHERE='$WHERE'"
    echo "CONFIG_FILE='$CONFIG_FILE'"
    cdnvm $TARGET_DIR
    source "$SOA_DIR/$VENV_SOA_NAME/bin/activate"
    set -o allexport && source $CONFIG_FILE && set +o allexport
    cd src
    flask run --port=9090 --without-threads
}

start-soa-db-reset() {
    start-soa-db-reset-usage() { echo "Usage: start-soa-db-reset [-b <branch/worktree> -c <config-file>]" 1>&2;}
    local OPTIND # (see https://stackoverflow.com/questions/16654607/using-getopts-inside-a-bash-function)

    local WHERE=$(git branch --show-current)
    local TARGET_DIR="."
    local CONFIG_FILE="./configs/envs/local.env"
    local DB_NAME="ggrcdev"

    while getopts "b:c:" o; do
        case "${o}" in
            b)
                WHERE="${OPTARG}"
                ;;
            c)
                CONFIG_FILE="${OPTARG}"
                ;;
            *)
                start-soa-db-reset-usage
                return;
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ -z "$WHERE" ]; then
        echo "Missing branch name!"
        return
    elif [[ $WHERE != "." ]]; then
        TARGET_DIR="$SOA_DIR/$WHERE"
    fi

    while IFS='=' read -a line
    do
        if [[ "${line[0]}" == "GGRC_DB_NAME" ]]; then
            DB_NAME="${line[1]}"
            break
        fi
    done < "$CONFIG_FILE"

    echo "Starting 'soa db reset'..."
    echo "WHERE='$WHERE'"
    echo "CONFIG_FILE='$CONFIG_FILE'"
    echo "DB_NAME='$DB_NAME'"
    cdnvm "$TARGET_DIR"
    source "$SOA_DIR/$VENV_SOA_NAME/bin/activate"
    export PYTHONPATH="$PYTHONPATH:$TARGET_DIR/src"
    set -o allexport && source $CONFIG_FILE && set +o allexport
    ./bin/db_reset -d "$DB_NAME"
}

start-q2c() {
    echo "Starting 'q2c'..."
    cd "$PROJECTS_DIR/q2c"
    source "./$VENV_NAME/bin/activate"
    ./bin/run_local.py
}

expand-alias() {
    if [ -z "$1" ]; then
        echo "Missing alias name!"
        return
    fi
    alias "$@" | cut -d\' -f2
}

patchset() {
    grep 'patchset' .branch_info | cut -d\= -f2
}

wt() {
    git worktree "$@"
}

va() {
    if [ $# -eq 0 ]; then
        source "$VENV_NAME/bin/activate"
        return
    fi

    case "$1" in
        be)
            va-be
            ;;
        mig | migration | migrations)
            va-migrations
            ;;
        soa)
            va-soa
            ;;
        q2c | nottifications)
            va
            ;;
        *)
            echo "Unknown venv!"
            ;;
    esac
}

va-migrations(){
    source "$MIGRATIONS_DIR/$VENV_MIG_NAME/bin/activate"
}

va-be(){
    source "$BE_DIR/$VENV_BE_NAME/bin/activate"
}

va-soa(){
    source "$SOA_DIR/$VENV_SOA_NAME/bin/activate"
}

wt() {
    git worktree "$@"
}

wt-list() {
    if [ $# -ne 0 ]; then
        echo "$(git worktree list | grep -i $@)"
    else
        echo "$(git worktree list)"
    fi
}

wt-move() {
    git worktree move "$1" "$2"
    cd "$2"
    git branch -M "$2"
    cd -
}

wt-add() {
    if [ $# -eq 0 ]
      then
        echo "git worktree add -b <branch> <path> <commit-ish>"
        return
    fi

    # -b <branch-name> <path-name> <commit-ish>
    git worktree add -b "$1" "$1" "$2"
}

wt-add-ex() {
    wt-add $@
    cd $1
    vscode-add-sett
}

wt-remove() {
    if [ $# -eq 0 ]; then
        echo "git worktree remove <worktree(==branch-name)> [--force]"
        return
    fi

    local WHERE="$1"
    if [[ $WHERE == */ ]]; then
        WHERE=${WHERE%?};
    fi
    shift

    if [[ "$1" == "--force" ]]; then
        git worktree remove --force $WHERE && git branch -D $WHERE
    else
        git worktree remove $WHERE && git branch -D $WHERE
    fi
}

vscode-add-sett () {
    # if [ ! -d ".vscode" ]; then
    #     mkdir .vscode
    # fi
    cp -Raf ../.ignore/.vscode.bak/ .vscode/
}


vscode-add-dev () {
    # if [ ! -d ".vscode" ]; then
    #     mkdir .vscode
    # fi
    cp -Raf ../.ignore/dev/ .vscode/dev/
}

makevenv(){
    if [ "$1" ]; then
        local venv_dst="$1"
    else
        local venv_dst="$VENV_NAME"
    fi
    python -m venv $venv_dst;
    source "./$venv_dst/bin/activate";
}

ps0() {
    unset PROMPT_COMMAND
    PS_STATE=0
    source $DOTFILES_DIR/bash_prompt
}

ps1() {
    unset PROMPT_COMMAND
    PS_STATE=1
    source $DOTFILES_DIR/bash_prompt
}

ps2() {
    unset PROMPT_COMMAND
    PS_STATE=2
    source $DOTFILES_DIR/bash_prompt

}
parentname() {
    echo "$(basename "$(dirname "$PWD")")"
}

projname() {
    local PARENT_NAME="$(parentname)"

    case "$PARENT_NAME" in
        ggrc_be)
            PARENT_NAME="be "
            ;;
        ggrc_fe)
            PARENT_NAME="fe "
            ;;
        soa)
            PARENT_NAME="$PARENT_NAME "
            ;;
        ggrc_migrations)
            PARENT_NAME="mig "
            ;;
        *)
            PARENT_NAME=""
            ;;
    esac
    echo "$PARENT_NAME"
}

vscode-clear-cache() {
    rm -rf ~/Library/Application\ Support/Code/Cache/*
    rm -rf ~/Library/Application\ Support/Code/CachedData/*
}

vscode-clear-pycache() {
    find . -name "*.pyc" -delete
    find . -name ".pytest_cache" -type d -exec rm -rf {} +
}

verify-commit-msg() {
    local COMM_MSG=""
    if [ "$1" ]; then
        COMM_MSG="$1"
    else
        COMM_MSG="$(git log -1 --pretty=%B)"
    fi
    python -m scripts.verify_commit_msg "$COMM_MSG"
}

gcert() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcert "$@"
}

glogin() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command glogin "$@"
}

gcertstatus() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcertstatus "$@"
}

wt-co() {
    eval $(echo "$1" | sed -E 's/-b change-[0-9]+/-B $(git curr-branch)/')
}

init() {

    init-usage() { echo "Usage: init <service-name>" 1>&2;}
    if [ $# -eq 0 ]; then
        init-usage
        return
    fi

    case "$1" in
        soa)
            init-soa
            ;;
        fe)
            init-fe
            ;;
        mig)
            start-mig-db-init
            ;;
        *)
            echo "Unknown service $1"
            init-usage
            ;;
    esac
}

init-soa() {
    nvm use 8
    rm -rf node_modules
    npm i --unsafe-perm
    ./bin/build_assets
    va-soa
    set -o allexport && source ./configs/envs/local.env && set +o allexport
    export PYTHONPATH="$PYTHONPATH:$(pwd)/src"
}

init-fe() {
    rm -rf node_modules
    npm i bower -g
    npm i
}