#!/usr/bin/env bash

ps0() {
  unset PROMPT_COMMAND
  PS1='$ '
}

ps1() {
    source $DOTFILES_DIR/bash_prompt
}

# Get named var (usage: get "VAR_NAME")
get() {
  echo "${!1}"
}

# git functions
git_branch() {
  git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

cob () {
  git checkout $(git branch | grep -i "$1")
}

findb() {
  git branch | grep -i "$1"
}

ls-dotfiles() {
  find . -maxdepth 1 -name ".*" -type l,f
}

ls-dotdirs() {
  find . -maxdepth 1 -name ".*" -type d
}

restart-wifi() {
  sudo modprobe -r iwlwifi && sudo modprobe iwlwifi
}


# # nvm functions
# cdnvm() {
#     command cd "$@";
#     nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

#     # If there are no .nvmrc file, use the default nvm version
#     if [[ ! $nvm_path = *[^[:space:]]* ]]; then

#         declare default_version;
#         default_version=$(nvm version default);

#         # If there is no default version, set it to `node`
#         # This will use the latest version on your machine
#         if [[ $default_version == "N/A" ]]; then
#             nvm alias default node;
#             default_version=$(nvm version default);
#         fi

#         # If the current version is not the default version, set it to use the default version
#         if [[ $(nvm current) != "$default_version" ]]; then
#             nvm use default >/dev/null;
#         fi

#     elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
#         declare nvm_version
#         nvm_version=$(<"$nvm_path"/.nvmrc)

#         declare locally_resolved_nvm_version
#         # `nvm ls` will check all locally-available versions
#         # If there are multiple matching versions, take the latest one
#         # Remove the `->` and `*` characters and spaces
#         # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
#         locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

#         # If it is not already installed, install it
#         # `nvm install` will implicitly use the newly-installed version
#         if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
#             nvm install "$nvm_version";
#         elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
#             nvm use "$nvm_version" >/dev/null;
#         fi
#     fi
# }

# tmux attach
function tat {

# When starting work on a project: open the terminal, cd into the folder, then `tat`.
#
# This function:
#
# - gets the name of the current directory and removes periods, which tmux doesn't like.
# - if any session with the same name is open, it re-attaches to it.
# - otherwise, it checks if an .envrc file is present and starts a new tmux session using direnv exec.
# - otherwise, starts a new tmux session with that name.
 
  name=$(basename `pwd` | sed -e 's/\.//g')

  if tmux ls 2>&1 | grep "$name"; then
    tmux attach -t "$name"
  elif [ -f .envrc ]; then
    direnv exec / tmux new-session -s "$name"
  else
    tmux new-session -s "$name"
  fi
}


patchset() {
    grep 'patchset' .branch_info | cut -d\= -f2
}

wt() {
    git worktree "$@"
}

va() {
    if [ $# -eq 0 ]; then
        source $VENV/bin/activate
    fi
}


wt-list() {
    git worktree list "$@"
}

wt-move() {
    git worktree move "$1" "$2"
    cd "$2"
    git branch -M "$2"
    cd - 
}

wt-add() {
    if [ $# -eq 0 ]
      then
        echo "git worktree add -b <branch> <path> <commit-ish>"
        return
    fi

    # -b <branch-name> <path-name> <commit-ish>
    git worktree add -b "$1" "$1" "$2"
}

wt-remove() {
    if [ $# -eq 0 ]; then
        echo "git worktree remove <worktree(==branch-name)> [--force]"
        return
    fi

    local WHERE="$1"
    if [[ $WHERE == */ ]]; then
        WHERE=${WHERE::-1}
    fi
    echo $WHERE
    shift
    
    if [[ "$1" == "--force" ]]; then
        git worktree remove --force $WHERE && git branch -D $WHERE
    else
        git worktree remove $WHERE && git branch -D $WHERE
    fi
}

add-vscode-sett () {
    cp -Rf ../.ignore/.vscode.bak/ .vscode/
}

vscode-clear-cache() {
    rm -rf ~/Library/Application\ Support/Code/Cache/*
    rm -rf ~/Library/Application\ Support/Code/CachedData/*
}

vscode-clear-pycache() {
    find . -name "*.pyc" -delete
}

function gcert() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcert "$@"
}

function glogin() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command glogin "$@"
}

function gcertstatus() {
  if [[ -n $TMUX ]]; then
    eval $(tmux show-environment -s)
  fi

  command gcertstatus "$@"
}
